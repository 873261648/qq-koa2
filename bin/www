#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('demo:server');
const https = require('https');
const http = require('http');
const fs = require('fs');
const path = require('path');

const websocket = require('../ws/webSocket');

/**
 * Get port from environment and store in Express.
 */


let httpsPort = '443';
let httpPort = '80';
// 创建http服务
let server = http.createServer(app.callback());
// 注册websocket
websocket(server);
server.listen(httpPort, () => {
    console.log(`server run at http://localhost`)
});
server.on('error', onError);
server.on('listening', onListening);

// 创建https服务
let options = {
    key: fs.readFileSync(path.join('ssl','2875131_guoyuchen.cn.key')),
    cert: fs.readFileSync(path.join('ssl','2875131_guoyuchen.cn.pem'))
};

let httpsServer = https.createServer(options,app.callback());
// 注册websocket
websocket(httpsServer);

httpsServer.listen(httpsPort, () => {
    console.log(`server run at https://localhost`)
});
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);


function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
